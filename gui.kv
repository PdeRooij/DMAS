#:kivy 1.9.0
#:import path os.path

<Crossing>:
    text: str(self.grid_no) + " " + str(self.spot)
    color: 0, 0, 0, 1
    canvas.before:
        Color:
            rgba: 1,1,1,1
        Rectangle:
            pos: self.pos
            size: self.size
            source: path.join('img','crossing_clean_empty.png')

    canvas:
        Color:
            rgba: 1,1,1,1

        # Right car
        Rectangle:
            pos: [self.pos[0]+(self.size[0]/1.3), self.pos[1]+self.size[1]/2.3]
            size: [self.size[0]/5, self.size[1]/8]
            source: path.join('img','red-car.png') if self.spot[1] >= 1 else path.join('img','trp_bg.png')

        # Left car
        Rectangle:
            pos: [self.pos[0]+self.size[1]/10, self.pos[1]+self.size[1]/2.3]
            size: [self.size[0]/5, self.size[1]/8]
            source: path.join('img','red-car.png') if self.spot[3] >= 1 else path.join('img','trp_bg.png')

        # Middle explosion
        Rectangle:
            pos: [self.pos[0]+self.size[1]/2.1, self.pos[1]+self.size[1]/3.8]
            size: [self.size[0]/3.5, self.size[1]/3.5]
            source: path.join('img','red-car_exp.png') if self.spot[4] >= 1 else path.join('img','trp_bg.png')

        PushMatrix
        Rotate:
            axis: 0,0,1
            angle: 270
            origin: self.center


    canvas.after:
        # Top car
        Rectangle:
            pos: [self.pos[0]+self.size[0]/10, self.pos[1]+(self.size[1]/2.3)]
            size: [self.size[0]/5, self.size[1]/8]
            source: path.join('img','red-car.png') if self.spot[0] >= 1 else path.join('img','trp_bg.png')

        # Bottom car
        Rectangle:
            pos: [self.pos[0]+self.size[0]/1.4, self.pos[1]+(self.size[1]/2.3)]
            size: [self.size[0]/5, self.size[1]/8]
            source: path.join('img','red-car.png') if self.spot[2] >= 1 else path.join('img','trp_bg.png')

        PopMatrix

BoxLayout:
    orientation: 'horizontal'

    # Agent grid simulation
    GridLayout:
        id: gridy
        size_hint_x: 0.8
#        # Green background
#        canvas.before:
#            Color:
#                rgba: .6, 1, .6, 1
#            Rectangle:
#                pos: self.pos
#                size: self.size

        cols: int(app.grid[0])
        rows: int(app.grid[1])
        #on_rows: app.grid_change()

#        Crossing
#        Crossing
#        Crossing
#        Crossing

    # Menu
    BoxLayout:
        orientation: 'vertical'
        size_hint_x: 0.25
        padding: '6dp', '6dp'
        spacing: '6dp'

        # Start / Pause
        Button:
            size_hint_y: 0.15
            text: 'Start' if app.start_simu == True else 'Pause'
            font_size: self.height * .4
            disabled: not app.server_running
            background_color: [0, 1, 0, 1] if app.start_simu == True else [1, 1, 0, 1]
            on_release: app.start_simulation()

        # Stop
        Button:
            size_hint_y: 0.15
            text: 'Stop'
            font_size: self.height * .4
            disabled: app.cycle == 0
            background_color: [1, 0, 0, 1]
            on_press: app.stop_simulation()

        # Cycle settings
        BoxLayout:
            size_hint_y: 0.08

            Label:
                size_hint_x: 1.25
                text: "Cycle: {}".format(app.cycle)
                font_size: self.height * .5

            TextInput:
                size_hint_x: 0.75
                size_hint_y: 0.9
                text: str(int(app.max_cycle))
                multiline: False
                disabled: True if app.cycle != 0 else False
                padding: [3, 1]
                font_size: self.height * .6

        Slider:
            size_hint_y: 0.08
            disabled: True if app.cycle != 0 else False
            min: 20
            max: 1000
            step: 20
            value: app.max_cycle
            on_value: app.max_cycle = self.value

        # Wait and agent
        BoxLayout:
            size_hint_y: 0.20
            orientation: 'horizontal'

            # Wait settings
            BoxLayout:
                orientation: 'vertical'
                padding: '6dp', '6dp'
                spacing: '10dp'

                BoxLayout:
                    orientation: 'horizontal'

                    Label:
                        size_hint_x: 1.25
                        text: "Wait:"
                        font_size: self.height * .5

                    TextInput:
                        size_hint_x: 0.75
                        size_hint_y: 0.9
                        text: str(app.sim_speed)
                        multiline: False
                        padding: [3, 1]
                        font_size: self.height * .6

                Slider:
                    #size_hint_y: 0.7
                    min: 0.1
                    max: 2
                    step: .1
                    value: app.sim_speed
                    on_value: app.sim_speed = self.value

            # Agent settings
            BoxLayout:
                orientation: 'vertical'
                padding: '6dp', '6dp'
                spacing: '10dp'

                BoxLayout:
                    orientation: 'horizontal'

                    Label:
                        size_hint_x: 1.25
                        text: "Agents:"
                        font_size: self.height * .5

                    TextInput:
                        size_hint_x: 0.75
                        size_hint_y: 0.9
                        text: str(int(app.agents_num))
                        multiline: False
                        disabled: True if app.cycle != 0 else False
                        padding: [3, 1]
                        font_size: self.height * .6

                Slider:
                    #size_hint_y: 0.7
                    disabled: True if app.cycle != 0 else False
                    min: 2
                    max: 20
                    step: 1
                    value: app.agents_num
                    on_value: app.agents_num = self.value

        # Grid settings
        BoxLayout:
            size_hint_y: 0.08
            orientation: 'horizontal'

            Label:
                size_hint_x: 1.25
                text: "Grid:"
                font_size: self.height * .5

            TextInput:
                size_hint_x: 0.30
                size_hint_y: 0.9
                text: str(int(app.grid[0]))
                multiline: False
                disabled: True if app.cycle != 0 else False
                padding: [3, 1]
                font_size: self.height * .6

            Label:
                size_hint_x: 0.15
                text: "x"
                font_size: self.height * .5

            TextInput:
                size_hint_x: 0.30
                size_hint_y: 0.9
                text: str(int(app.grid[1]))
                multiline: False
                disabled: True if app.cycle != 0 else False
                padding: [3, 1]
                font_size: self.height * .6

        Slider:
            size_hint_y: 0.08
            disabled: True if app.cycle != 0 else False
            min: 2
            max: 10
            step: 1
            value: app.grid[0] + app.grid[1]
            on_value: app.grid = [self.value / 2 + ((self.value/2)-int(self.value/2)), self.value / 2 - ((self.value/2)-int(self.value/2))]
            #on_value: app.grid = [app.grid[0], app.grid[1]]

        # Statistics
#        Label:
#            size_hint_y: 0.60
#            text: "Statistics"
#            color: 0, 0, 0, 1
#            canvas.before:
#                Color:
#                    rgba: 1, 1, 1, 1
#                Rectangle:
#                    pos: self.pos
#                    size: self.size

        # Print simulation status
        ScrollView:
            size_hint_y: 0.30
            # White background
            canvas.before:
                Color:
                    rgba: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size

            Label:
                id: label
                color: 0, 0, 0, 1
                size_hint_y: None
                height: self.texture_size[1]
                text_size: self.size[0], None